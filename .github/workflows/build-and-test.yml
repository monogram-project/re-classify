name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22', '1.23']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Format check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted:"
          gofmt -s -l .
          exit 1
        fi
    
    - name: Vet
      run: go vet ./...
    
    - name: Run tests
      run: go test -race -coverprofile=coverage.out -covermode=atomic ./...
    
    - name: Build
      run: go build -v ./cmd/re-classify

    - name: Install Python3 and pip
      run: |
        sudo apt-get update
        sudo apt-get install -y python3 python3-venv python3-pip

    - name: Install Poetry (via pipx)
      run: |
        # Install pipx into user if missing (no-op if present)
        python3 -m pip install --user pipx || true
        python3 -m pipx ensurepath || true

        # Locate pipx binary (system, /opt, or user-local)
        pipx_bin="$(command -v pipx || true)"
        if [ -z "$pipx_bin" ] && [ -x "$HOME/.local/bin/pipx" ]; then
          pipx_bin="$HOME/.local/bin/pipx"
        fi
        if [ -z "$pipx_bin" ] && [ -x "/opt/pipx_bin/pipx" ]; then
          pipx_bin="/opt/pipx_bin/pipx"
        fi
        if [ -z "$pipx_bin" ]; then
          echo "pipx not found; aborting"
          exit 1
        fi

        # Expose pipx's bin directory to the rest of the job
        echo "$(dirname "$pipx_bin")" >> $GITHUB_PATH

        # Install poetry using the discovered pipx
        "$pipx_bin" install poetry || "$pipx_bin" reinstall poetry

    - name: Install just (prebuilt)
      run: |
        mkdir -p $HOME/.local/bin
        JUST_URL=$(curl -s https://api.github.com/repos/casey/just/releases/latest | grep browser_download_url | grep linux | grep amd64 | cut -d '"' -f 4)
        curl -fsSL "$JUST_URL" -o /tmp/just.tar.gz
        tar -xzf /tmp/just.tar.gz -C /tmp
        mv /tmp/just ~/.local/bin/just
        chmod +x ~/.local/bin/just
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Run functional tests
      run: just functest
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: './...'
