tests:

  - name: "if EXPR fi"
    command: "go run ./cmd/re-classify functests/simple-config.yaml"
    input: |
      if
      x
      fi
    expected_output: |
      S fi
      V
      E

  - name: "while x: do x -= 1 done"
    command: "go run ./cmd/re-classify functests/simple-config.yaml"
    input: |
      while 
      x
      : 
      do 
      x 
      -= 
      1 
      done
    expected_output: |
      S done
      V
      U
      L
      V
      O 0 100 0
      U
      E

  - name: "$0 pattern substitution"
    command: "go run ./cmd/re-classify functests/endings-config.yaml"
    # Even though there is no `while` in the input, while_end is still detected
    # via the implicit generation of `end:` patterns.
    input: |
      if
      endif
      while_end
    expected_output: |
      S endif if_end
      E
      E

  - name: Implicit endings from end patterns
    command: "go run ./cmd/re-classify functests/end-config.yaml"
    input: |
      if
      fi
      done
    expected_output: |
      S fi
      E
      E
  - name: Implicit endings from end patterns, cannot detect endings when end not present.
    command: "go run ./cmd/re-classify functests/end-config.yaml"
    input: |
      if
      fi
      while
    expected_output: |
      S fi
      E
      S


  - name: "Compound endings with substitution"
    command: "go run ./cmd/re-classify functests/bad-compound-endings-config.yaml"
    expected_exit_status: 1 

  - name: "Compound endings with substitution"
    command: "go run ./cmd/re-classify functests/good-compound-endings-config.yaml"
    input: |
      abc_DEF
      DEF_abc
      xyz_ABC
      PQR_xyz
    expected_output: |
      S DEF_abc
      E
      S ABC_xyz
      E

  - name: "Classify brackets"
    command: "go run ./cmd/re-classify functests/simple-config.yaml"
    input: |
      {
      }
    expected_output: |
      [ 1 }
      ]
